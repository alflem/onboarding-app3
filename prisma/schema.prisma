// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Användare
model User {
  id             String           @id @default(cuid())
  name           String
  email          String           @unique
  password       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  role           Role             @default(EMPLOYEE)
  progress       TaskProgress[]
  buddyFor       User[]           @relation("BuddyRelation")
  buddy          User?            @relation("BuddyRelation", fields: [buddyId], references: [id])
  buddyId        String?
}

// Organisationer
model Organization {
  id        String     @id @default(cuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     User[]
  templates Template[]
}

// Checklistmallar
model Template {
  id             String           @id @default(cuid())
  name           String
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  categories     Category[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

// Kategorier i checklistan
model Category {
  id         String   @id @default(cuid())
  name       String
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  tasks      Task[]
  order      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Uppgifter i checklistan
model Task {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  categoryId  String
  category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  order       Int
  isBuddyTask Boolean        @default(false)
  progress    TaskProgress[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

// Användarens framsteg för varje uppgift
model TaskProgress {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, taskId])
}

// Användarroller
enum Role {
  SUPER_ADMIN
  ADMIN
  EMPLOYEE
}