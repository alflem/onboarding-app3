generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  name           String
  email          String         @unique
  password       String?
  image          String?
  emailVerified  DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organizationId String?
  role           Role           @default(EMPLOYEE)
  isAzureManaged Boolean        @default(false)
  buddyId        String?
  accounts       Account[]
  sessions       Session[]
  progress       TaskProgress[]
  buddy          User?          @relation("BuddyRelation", fields: [buddyId], references: [id])
  buddyFor       User[]         @relation("BuddyRelation")
  organization   Organization?  @relation(fields: [organizationId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  extraFields       Json?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id           String    @id @default(cuid())
  name         String
  buddyEnabled Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  checklist    Checklist?
  users        User[]
}

model Checklist {
  id             String       @id @default(cuid())
  organizationId String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  categories     Category[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Category {
  id          String    @id @default(cuid())
  name        String
  checklistId String
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  tasks       Task[]
}

model Task {
  id          String         @id @default(cuid())
  title       String
  description String?
  link        String?
  categoryId  String
  order       Int
  isBuddyTask Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  progress    TaskProgress[]
}

model TaskProgress {
  id        String   @id @default(cuid())
  userId    String
  taskId    String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, taskId])
}

enum Role {
  SUPER_ADMIN
  ADMIN
  EMPLOYEE
}
