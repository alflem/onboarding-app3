generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                  @id @default(cuid())
  name                       String
  email                      String                  @unique
  password                   String?
  image                      String?
  emailVerified              DateTime?
  createdAt                  DateTime                @default(now())
  updatedAt                  DateTime                @updatedAt
  organizationId             String?
  role                       Role                    @default(EMPLOYEE)
  buddyId                    String? // legacy single-buddy (kept for backward compatibility)
  accounts                   Account[]
  sessions                   Session[]
  progress                   TaskProgress[]
  buddy                      User?                   @relation("BuddyRelation", fields: [buddyId], references: [id])
  buddyFor                   User[]                  @relation("BuddyRelation")
  buddyAssignments           BuddyAssignment[]       @relation("UserBuddyAssignments")
  asBuddyAssignments         BuddyAssignment[]       @relation("BuddyAssignmentsAsBuddy")
  organization               Organization?           @relation(fields: [organizationId], references: [id])
  buddyPreparationsAsBuddy   BuddyPreparation[]      @relation("BuddyPreparationBuddy")
  buddyPreparationAsUser     BuddyPreparation?       @relation("BuddyPreparationUser")
  // Opposite side for BuddyPreparationBuddy.buddy relation
  buddyPreparationBuddyLinks BuddyPreparationBuddy[] @relation("BuddyPreparationBuddyUser")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  extraFields       Json?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id                String             @id @default(cuid())
  name              String
  buddyEnabled      Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  checklist         Checklist?
  users             User[]
  buddyPreparations BuddyPreparation[]
}

model Checklist {
  id             String       @id @default(cuid())
  organizationId String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  categories     Category[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Category {
  id              String    @id @default(cuid())
  name            String
  checklistId     String
  order           Int
  isBuddyCategory Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  checklist       Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  tasks           Task[]
}

model Task {
  id          String         @id @default(cuid())
  title       String
  description String?
  link        String?
  categoryId  String
  order       Int
  isBuddyTask Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  progress    TaskProgress[]
}

model TaskProgress {
  id        String   @id @default(cuid())
  userId    String
  taskId    String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, taskId])
}

model PreAssignedRole {
  id        String   @id @default(cuid())
  email     String   @unique
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BuddyPreparation {
  id             String   @id @default(cuid())
  firstName      String
  lastName       String
  email          String? // Optional email för automatisk koppling
  buddyId        String // Legacy primary buddy (kept for compatibility)
  organizationId String
  isActive       Boolean  @default(true) // true = väntar på användare, false = kopplad
  userId         String?  @unique // null tills användaren skapar konto
  notes          String? // Valfria anteckningar
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  buddy        User                    @relation("BuddyPreparationBuddy", fields: [buddyId], references: [id], onDelete: Cascade)
  buddies      BuddyPreparationBuddy[]
  organization Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User?                   @relation("BuddyPreparationUser", fields: [userId], references: [id], onDelete: SetNull)

  @@unique([email, organizationId]) // Prevent duplicate preparations for same email in same org
}

model BuddyAssignment {
  id        String   @id @default(cuid())
  userId    String
  buddyId   String
  createdAt DateTime @default(now())

  // Relations
  user  User @relation("UserBuddyAssignments", fields: [userId], references: [id], onDelete: Cascade)
  buddy User @relation("BuddyAssignmentsAsBuddy", fields: [buddyId], references: [id], onDelete: Cascade)

  @@unique([userId, buddyId])
}

model BuddyPreparationBuddy {
  id                 String   @id @default(cuid())
  buddyPreparationId String
  buddyId            String
  createdAt          DateTime @default(now())

  // Relations
  preparation BuddyPreparation @relation(fields: [buddyPreparationId], references: [id], onDelete: Cascade)
  buddy       User             @relation("BuddyPreparationBuddyUser", fields: [buddyId], references: [id], onDelete: Cascade)

  @@unique([buddyPreparationId, buddyId])
}

enum Role {
  SUPER_ADMIN
  ADMIN
  EMPLOYEE
}
