# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: onboarding-app    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '22.x'                # set this to the node version to use

permissions:
  contents: read
  id-token: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install, build, and test
      run: |
        npm install
        npx prisma generate
        npm run build --if-present
        npm run test --if-present

    - name: Run database migrations and seeding
      run: |
        npx prisma migrate deploy
        npx prisma db seed
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Install production dependencies only
      run: |
        # Remove dev dependencies and reinstall only production
        rm -rf node_modules
        npm ci --only=production
        # Generate Prisma client for production
        npx prisma generate

    - name: Create optimized deployment package
      run: |
        # Create deployment package with only necessary files
        mkdir deployment-package

        # Copy standalone build files (this is the main app)
        if [ -d ".next/standalone" ]; then
          echo "Using standalone build"
          cp -r .next/standalone/* deployment-package/
          # Create .next directory structure for static files
          mkdir -p deployment-package/.next
          # Copy static files to the correct location for standalone
          cp -r .next/static deployment-package/.next/static
          cp -r public deployment-package/public
          # For standalone, we use the built-in server.js from Next.js
          echo "Using Next.js standalone server"
        else
          echo "Using regular build"
          cp -r .next deployment-package/.next
          cp -r public deployment-package/public
          cp package.json deployment-package/
          cp next.config.ts deployment-package/
          cp server.js deployment-package/
          # Copy only production node_modules (much smaller)
          cp -r node_modules deployment-package/node_modules
        fi

        # Copy Prisma schema
        mkdir -p deployment-package/prisma
        cp prisma/schema.prisma deployment-package/prisma/schema.prisma
        cp prisma/seed.ts deployment-package/prisma/seed.ts
        # Copy migrations directory if it exists
        if [ -d "prisma/migrations" ]; then
          cp -r prisma/migrations deployment-package/prisma/migrations
        fi

        # For standalone builds, the node_modules are already included
        # Remove unnecessary files from node_modules if they exist
        if [ -d "deployment-package/node_modules" ]; then
          find deployment-package/node_modules -type d -name ".cache" -exec rm -rf {} + 2>/dev/null || true
          find deployment-package/node_modules -type d -name "@types" -exec rm -rf {} + 2>/dev/null || true
          find deployment-package/node_modules -type d -name "typescript" -exec rm -rf {} + 2>/dev/null || true
          find deployment-package/node_modules -name "*.d.ts" -delete 2>/dev/null || true
          find deployment-package/node_modules -name "*.test.js" -delete 2>/dev/null || true
          find deployment-package/node_modules -name "*.spec.js" -delete 2>/dev/null || true
        fi

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: deployment-package


  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: .


